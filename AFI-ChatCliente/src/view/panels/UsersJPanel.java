package view.panels;

import client.ChatClientManager;
import java.awt.Image;
import java.util.LinkedList;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import model.User;
import view.ChatJFrame;
import view.MainJFrame;
import view.interfaces.IUsersJPanel;
import view.panels.controls.jlist.CustomCellRenderer;
import view.panels.controls.jlist.CustomListItem;

/**
 *
 * @author Guerino
 */
public class UsersJPanel extends javax.swing.JPanel {
    private MainJFrame mainFrame;
    private List<ChatJFrame> listWindowsChat;
    private DefaultListModel<CustomListItem> listModel;
    private Image imageUser;
    private ChatClientManager clientManager;
    private User userFrom;
    
    
    /**
     * Creates new form UsersJPanel
     * @param frame
     */
    public UsersJPanel(MainJFrame frame) {      
        initComponents();
        //atributos de esta clase
        this.mainFrame = frame;
        this.clientManager = null;
        this.listWindowsChat = new LinkedList<>();
               
        this.listModel = new DefaultListModel<>();
        this.jListUsers.setModel(listModel);
        //por cuestiones de rendimiento cargamos el icono aqui para tenerlo ya listo mas adelante
        this.imageUser = new ImageIcon(getClass().getResource("/resources/user-24.png")).getImage();
        // Assign our custom cell renderer to the JList object 
        this.jListUsers.setCellRenderer(new CustomCellRenderer());
        this.userFrom = null;
        this.jLabelInfoBar.setText("Usuarios conectados: 0");
    }
    
    /**
     * Metodo que recibe de la clase LoginJPanel el Socket de conexion
     * @param client 
     * @param userPanel 
     */
    public void setConnection(ChatClientManager client, UserJPanelListener userPanel) {
        this.clientManager = client; 
    }

    /**
     * Envia mensajes al servidor
     * @param message 
     */
    public void sendMessage(String message){
        if(this.clientManager != null)
            this.clientManager.sendText(message);//acordarse siempre la regla de los dos puntos
    }
    
    /**
     * Obtiene el puerto asignado por el servidor
     * @return 
     */
    public int getLocalPort() {
        if(this.clientManager != null)
            return this.clientManager.getLocalPort();
        else
            return 0;
    }

    //Metodo que guarda el usuario loguedo
    public void setUserFrom(User userFrom) {
        this.userFrom = userFrom;
    } 
   
    /**
     * This method is called from within the constructor to initialize the form. 
     * WARNING: Do NOT modify this code. The content of this method is always 
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jListUsers = new javax.swing.JList();
        jLabelInfoBar = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(281, 422));

        jListUsers.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Conectados" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jListUsers.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListUsers.setDoubleBuffered(true);
        jListUsers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListUsersMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jListUsers);
        jListUsers.getAccessibleContext().setAccessibleParent(this);

        jLabelInfoBar.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabelInfoBar.setText("jLabel1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 281, Short.MAX_VALUE)
            .addComponent(jLabelInfoBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 395, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelInfoBar, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jListUsersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListUsersMouseClicked
        if (evt.getClickCount() == 2) {
            //usuario seleccionado
            if(jListUsers.getSelectedIndex() >= 0){
                CustomListItem itemTo = listModel.elementAt(jListUsers.getSelectedIndex());
                
                User to = new User(itemTo.getId(),itemTo.getPort(),itemTo.getName());
                User from = new User(this.userFrom.getId(), getLocalPort(), mainFrame.getUser());
                
                //abrimos la ventana de chat                
                openWindowsChat(to, from , "");
            }
        }
    }//GEN-LAST:event_jListUsersMouseClicked
    
    public void closeChatJframe() {
        if(listWindowsChat.size() > 0){
            for (int i = 0; i < listWindowsChat.size(); i++) {
                listWindowsChat.get(i).dispose();
            }
        }
    }
    
    public UserJPanelListener getUserPanelListener() {
        return new UserJPanelListener();
    }
    
    private UsersJPanel getUserJPanel() {
        return this;
    }
    
    /**
     * Metodo que se invoca al cerrar el usuario una ventana de chat
     * @param port puerto asignado a la ventana
     */
    public void removeChatJFrame(int port){
        for (int i = 0; i < listWindowsChat.size(); i++) {
           if(listWindowsChat.get(i).getToUserPort() == port){
               listWindowsChat.remove(i);
               break;
           }            
        }        
    }
    
    private ChatJFrame findWindow(int port) {
        for (int i = 0; i < listWindowsChat.size(); i++) {
            //si ya esta abierta, la retornamos
            if(listWindowsChat.get(i).getToUserPort() == port) {
                return listWindowsChat.get(i);
            }
        }        
        return null;
    }  
    
    private void openWindowsChat(User to, User from, String message) {
        ChatJFrame frame = new ChatJFrame(to, from, clientManager);
        frame.setTitle("[" + mainFrame.getUser() + "]->" + to.getName());
        frame.setUserPanel(this);//para poder remover una ventana de la lista, cuando el usuario la cierre
        frame.setLocationRelativeTo(getUserJPanel());
        frame.setVisible(true);
        
        String mensaje = "";
        
        if(!message.isEmpty()){            
            //insertamos con el color del from
            mensaje = to.getName() + " dice ("+ frame.getHoraActual() + "): \n  - " + message;
            frame.insertTextDocumentTo(mensaje);
        }
        
        //Agregamos la ventana creada a la lista
        listWindowsChat.add(frame);
    }
    
    /**
     * Listener de la clase UsersJPanel
     */
    public class UserJPanelListener implements IUsersJPanel {

        @Override
        public void updateTableModel(List<User> lista) {          
                
                listModel = new DefaultListModel<>();            
               
                //Rellenamos la tabla con los resultados       
                for(User u : lista) {
                    //Si no es el usurio de este chat(osea cliente)
                    if(!u.getName().equals(mainFrame.getUser())) {
                        listModel.addElement(new CustomListItem(imageUser,u.getName(), u.getId(), u.getPort()));
                    }else{
                        setUserFrom(u);
                    }
                }
                
                //Establecemos el modelo
                jListUsers.setModel(listModel);//si, no lo hacemos aqui, el JList queda en blanco algunas veces.
               
                jLabelInfoBar.setText("Usuarios conectados: " + (lista.size()-1));
        }

        @Override
        public void openChatFrame(User to, User from, String message) {
            //Primero buscamos que no este en la lista de ventanas abiertas
            if(listWindowsChat.size() > 0) {
                  ChatJFrame frame = findWindow(to.getPort());
                  if(frame != null){
                    String strMesaje = to.getName() + " dice ("+ frame.getHoraActual() + "): \n  - " + message;
                    frame.insertTextDocumentTo(strMesaje);
//                      System.out.println("Ventana encontrada...");
                  }else{        
//                       System.out.println("Creando ventana no encontrada...");
                    //Si no existe la creamos y la agregamos a la lista de ventanas abiertas
                    openWindowsChat(to, from, message);
                  }
            }else {   
//                 System.out.println("Creando ventana, lista vacia...");
                    //Si la lista no tiene ninguna ventana abierta aun, la creamos y la agregamos a la lista de ventanas abiertas
                    openWindowsChat(to, from, message);
                }                     
        } 
        
        @Override
        public void exitChat(){
            mainFrame.exit();
        }
    }    
    
       
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabelInfoBar;
    private javax.swing.JList jListUsers;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}