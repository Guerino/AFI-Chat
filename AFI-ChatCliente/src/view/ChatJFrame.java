package view;

import client.ChatClientManager;
import java.awt.Color;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.text.BadLocationException;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
import model.User;
import view.panels.UsersJPanel;

/**
 *
 * @author Guerino
 */
public class ChatJFrame extends javax.swing.JFrame {
    private ChatClientManager clientManager;
    private UsersJPanel userPanel;
    private StyledDocument document;
    private User userTo;
    private User userFrom;      
    
    /**
     * Constructor de la clase
     * @param to
     * @param from
     * @param client 
     */
    public ChatJFrame(User to, User from, ChatClientManager client) {            
        setIconImage (new ImageIcon(getClass().getResource("/resources/chat32.png")).getImage());
        initComponents();
        initStylesDoc();
        document = (StyledDocument)jTextPaneChat.getDocument();  
        this.userTo = to;
        this.userFrom = from;
        this.clientManager = client;
    }
        
    /**
     * This method is called from within the constructor to initialize the form. 
     * WARNING: Do NOT modify this code. The content of this method 
     * is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPaneChat = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPaneSendText = new javax.swing.JTextPane();
        jButtonSend = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jTextPaneChat.setEditable(false);
        jTextPaneChat.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jScrollPane1.setViewportView(jTextPaneChat);

        jTextPaneSendText.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jTextPaneSendText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextPaneSendTextKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(jTextPaneSendText);

        jButtonSend.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButtonSend.setText("Enviar");
        jButtonSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSendActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 358, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonSend, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 207, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSend, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void setUserPanel(UsersJPanel userPanel) {
        this.userPanel = userPanel;
    } 
    
    public String getHoraActual() {
        Date hora = new Date();
        DateFormat formateador = SimpleDateFormat.getTimeInstance(DateFormat.SHORT, Locale.getDefault());
        return formateador.format(hora);
    }
        
    /**
     * Inserta texto en el jTextPaneChat
     * @param text 
     */
    public void insertTextDocumentTo(String text) {
        if(document.getLength() == 0){              
               appendString(text);  
               setTextStyleReceiver(0, text.lastIndexOf("):")+2);
        }
        else{               
               appendString("\n"+text);
               setTextStyleReceiver(document.getLength()-text.length(), text.lastIndexOf("):")+2);               
        }
    }
    
    public void insertTextDocumentFrom(String text) {
        if(document.getLength() == 0){              
               appendString(text);  
               setTextStyleSend(0, text.lastIndexOf("):")+2);
        }
        else{               
               appendString("\n"+text);
               setTextStyleSend(document.getLength()-text.length(), text.lastIndexOf("):")+2);               
        }
    }
    
    private void appendString(String str) {
        try {            
            document.insertString(document.getLength(), str, null);
                                                            // ^ or your style attribute 
            //Ponemos el cursor en la ultima linea
            jTextPaneChat.setCaretPosition(jTextPaneChat.getDocument().getLength());
        } catch (BadLocationException ex) {
            System.out.println("StyledDocument - aqui fallo");
            Logger.getLogger(ChatJFrame.class.getName()).log(Level.SEVERE, null, ex);            
        }
    }
    
    /**
     * Estilos para el documento de JTextPane
     */
    private void initStylesDoc(){
        Style stSend = jTextPaneChat.addStyle("TextSend", null);
        //StyleConstants.setBold(style, true);
        StyleConstants.setForeground(stSend, Color.BLUE);
        
        Style stReceiver = jTextPaneChat.addStyle("TextReceiver", null);
        StyleConstants.setForeground(stReceiver, Color.RED);
        
//                //color
//                Color c = new Color(0,0,255);
//                String colorS = Integer.toString(c.getRGB());//                
//                System.out.println("Color: " + colorS);
//                Color col = new Color(Integer.parseInt(colorS));//                
//                System.out.println("Col: " + col.toString());
    }
    
    private void setTextStyleSend(int offset, int length) {
        document.setCharacterAttributes(offset, length, jTextPaneChat.getStyle("TextSend"), true);
    }
    
    private void setTextStyleReceiver(int offset, int length){
        document.setCharacterAttributes(offset, length, jTextPaneChat.getStyle("TextReceiver"), true);
    }
    
    private void jButtonSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSendActionPerformed
        try {
            String xmlMensaje = "";
            // Boton que envia el texto al otro usuario
            if(!this.jTextPaneSendText.getText().equals("")) {
                //Texto a mostrar y a enviar
                String texto = userFrom.getName() + " dice ("+ getHoraActual() + "): \n  - " + this.jTextPaneSendText.getText().trim();
                //insertamos el texto en el documento
                this.insertTextDocumentFrom(texto);
                               
                //[from]->to                
                //El protocolo esta armado en base a un archivo xml
                xmlMensaje = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" +
                            "<message>" +
                            "<action>send</action>" +
                            "<head>" +
                            "<to>" + userTo.getName() + "</to>" +
                            "<to_id>" + String.valueOf(userTo.getId()) + "</to_id>" +
                            "<to_port_id>" + userTo.getPort() + "</to_port_id></head>" +
                            "<to_color>" + "RED"  + "</to_color>" +
                            "<from>" + userFrom.getName() + "</from>" +
                            "<from_id>" + String.valueOf(userFrom.getId())  + "</from_id>" +  //falta setear chatFrame con los ID correctos
                            "<from_port_id>" + userFrom.getPort()  + "</from_port_id>" + 
                            "<from_color>" + "BLUE"  + "</from_color>" +
                            "<data>" + jTextPaneSendText.getText().trim() + "</data>" +
                            "</message>";
            }
            System.out.println("Enviado: " + xmlMensaje);            
            //Enviamos el mensaje al servidor
            clientManager.sendText(xmlMensaje);
            //Limpiamos
            jTextPaneSendText.setText("");
        } catch (Exception ex) {
            Logger.getLogger(ChatJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }          
    }//GEN-LAST:event_jButtonSendActionPerformed

    public int getToUserPort(){
        return this.userTo.getPort();
    } 
    
    private void jTextPaneSendTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextPaneSendTextKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextPaneSendTextKeyPressed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        if(userPanel != null)
            userPanel.removeChatJFrame(this.userTo.getPort());
    }//GEN-LAST:event_formWindowClosing
       
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonSend;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextPane jTextPaneChat;
    private javax.swing.JTextPane jTextPaneSendText;
    // End of variables declaration//GEN-END:variables

}